import { ethers } from 'ethers';
import { TronClient } from './tron-client';
import { PriceOracle } from './price-oracle';
import { InchFusionTypes } from './types';

export class EthTronResolver {
  private ethProvider: ethers.JsonRpcProvider;
  private tronClient: TronClient;
  private priceOracle: PriceOracle;
  private resolverSigner: ethers.Wallet;
  private isRunning = false;

  // Contrats d√©ploy√©s
  private readonly ETH_BRIDGE_CONTRACT = '0xfde41A17EBfA662867DA7324C0Bf5810623Cb3F8';
  private readonly TRON_BRIDGE_CONTRACT = 'TA879tNjuFCd8w57V3BHNhsshehKn1Ks86';

  constructor(config: {
    ethRpcUrl: string;
    ethPrivateKey: string;
    tronConfig: InchFusionTypes.Config['tron'];
  }) {
    this.ethProvider = new ethers.JsonRpcProvider(config.ethRpcUrl);
    this.resolverSigner = new ethers.Wallet(config.ethPrivateKey, this.ethProvider);
    this.tronClient = new TronClient(config.tronConfig);
    this.priceOracle = new PriceOracle();
  }

  /**
   * D√©marrer le resolver
   */
  async start(): Promise<void> {
    console.log('üöÄ Starting ETH ‚Üî TRON Resolver...');
    
    this.isRunning = true;
    
    // D√©marrer les watchers en parall√®le
    await Promise.all([
      this.watchEthToTronSwaps(),
      this.watchTronToEthSwaps()
    ]);
  }

  /**
   * Arr√™ter le resolver
   */
  stop(): void {
    console.log('üõë Stopping ETH ‚Üî TRON Resolver...');
    this.isRunning = false;
  }

  /**
   * Watcher ETH ‚Üí TRON swaps
   */
  private async watchEthToTronSwaps(): Promise<void> {
    console.log('üëÄ Watching ETH ‚Üí TRON swaps...');

    const bridgeContract = new ethers.Contract(
      this.ETH_BRIDGE_CONTRACT,
      [
        'event SwapCreated(bytes32 indexed swapId, address indexed user, uint256 amount, bytes32 hashlock, string targetChain)',
        'function completeSwap(bytes32 swapId, bytes32 secret) external',
        'function getSwap(bytes32 swapId) external view returns (address user, uint256 amount, bytes32 hashlock, string memory targetAccount, bool completed, bool refunded, uint256 timelock)'
      ],
      this.resolverSigner
    );

    // √âcouter les √©v√©nements SwapCreated
    bridgeContract.on('SwapCreated', async (swapId, user, amount, hashlock, targetChain, event) => {
      if (!this.isRunning) return;
      
      console.log('üîî ETH ‚Üí TRON swap detected:', {
        swapId: swapId.substring(0, 10) + '...',
        user,
        amount: ethers.formatEther(amount),
        targetChain
      });

      try {
        await this.processEthToTronSwap(swapId, user, amount, hashlock, targetChain);
      } catch (error) {
        console.error('‚ùå Failed to process ETH ‚Üí TRON swap:', error);
      }
    });
  }

  /**
   * Watcher TRON ‚Üí ETH swaps
   */
  private async watchTronToEthSwaps(): Promise<void> {
    console.log('üëÄ Watching TRON ‚Üí ETH swaps...');

    // Utiliser le syst√®me d'√©v√©nements Tron
    this.tronClient.watchBridgeEvents(async (event) => {
      if (!this.isRunning) return;
      
      if (event.type === 'EscrowCreated') {
        console.log('üîî TRON ‚Üí ETH swap detected:', event.data);
        
        try {
          await this.processTronToEthSwap(event.data);
        } catch (error) {
          console.error('‚ùå Failed to process TRON ‚Üí ETH swap:', error);
        }
      }
    });
  }

  /**
   * Traiter un swap ETH ‚Üí TRON
   */
  private async processEthToTronSwap(
    swapId: string,
    user: string,
    ethAmount: ethers.BigNumber,
    hashlock: string,
    targetChain: string
  ): Promise<void> {
    console.log('‚öôÔ∏è Processing ETH ‚Üí TRON swap...');

    try {
      // 1. Calculer l'√©quivalent TRX
      const ethAmountStr = ethers.formatEther(ethAmount);
      const trxAmount = await this.priceOracle.convertEthToTrx(ethAmountStr);
      console.log(`üí± Converting ${ethAmountStr} ETH ‚Üí ${trxAmount} TRX`);

      // 2. Cr√©er le bridge TRON correspondant
      const tronResult = await this.tronClient.createTronBridge(
        hashlock,
        user, // ETH address comme target
        'ethereum',
        trxAmount
      );

      if (!tronResult.success) {
        throw new Error(`TRON bridge creation failed: ${tronResult.error}`);
      }

      console.log('‚úÖ TRON bridge created:', tronResult.swapId?.substring(0, 10) + '...');

      // 3. Monitorer la r√©v√©lation du secret sur TRON
      this.monitorSecretRevelation(hashlock, swapId, tronResult.swapId!);

    } catch (error) {
      console.error('‚ùå ETH ‚Üí TRON processing failed:', error);
    }
  }

  /**
   * Traiter un swap TRON ‚Üí ETH
   */
  private async processTronToEthSwap(eventData: any): Promise<void> {
    console.log('‚öôÔ∏è Processing TRON ‚Üí ETH swap...');

    try {
      // 1. Calculer l'√©quivalent ETH
      const trxAmount = eventData.amount;
      const ethAmount = await this.priceOracle.convertTrxToEth(trxAmount);
      console.log(`üí± Converting ${trxAmount} TRX ‚Üí ${ethAmount} ETH`);

      // 2. Cr√©er le swap ETH correspondant (via 1inch ou contrat direct)
      const ethBridge = new ethers.Contract(
        this.ETH_BRIDGE_CONTRACT,
        [
          'function createSwap(bytes32 hashlock, string calldata targetAccount) external payable returns (bytes32)',
          'function completeSwap(bytes32 swapId, bytes32 secret) external'
        ],
        this.resolverSigner
      );

      const tx = await ethBridge.createSwap(
        eventData.hashlock,
        eventData.targetAccount,
        {
          value: ethers.parseEther(ethAmount),
          gasLimit: 200000
        }
      );

      await tx.wait();
      console.log('‚úÖ ETH bridge created:', tx.hash);

      // 3. Monitorer la r√©v√©lation du secret sur ETH
      this.monitorEthSecretRevelation(eventData.hashlock, eventData.escrow);

    } catch (error) {
      console.error('‚ùå TRON ‚Üí ETH processing failed:', error);
    }
  }

  /**
   * Monitorer la r√©v√©lation du secret (ETH ‚Üí TRON)
   */
  private monitorSecretRevelation(hashlock: string, ethSwapId: string, tronSwapId: string): void {
    console.log('üëÅÔ∏è Monitoring secret revelation for', hashlock.substring(0, 10) + '...');

    // V√©rifier p√©riodiquement si le secret a √©t√© r√©v√©l√©
    const checkInterval = setInterval(async () => {
      if (!this.isRunning) {
        clearInterval(checkInterval);
        return;
      }

      try {
        // V√©rifier sur TRON si le swap a √©t√© compl√©t√© (secret r√©v√©l√©)
        const tronSwap = await this.tronClient.getSwap(tronSwapId);
        
        if (tronSwap.completed) {
          console.log('üîì Secret revealed on TRON, completing ETH side...');
          clearInterval(checkInterval);
          
          // Extraire le secret depuis les √©v√©nements TRON
          const secret = await this.extractSecretFromTronEvents(tronSwapId);
          if (secret) {
            await this.completeEthSwap(ethSwapId, secret);
          }
        }
      } catch (error) {
        console.error('Error checking secret revelation:', error);
      }
    }, 10000); // Check every 10 seconds

    // Timeout apr√®s 24h
    setTimeout(() => {
      clearInterval(checkInterval);
      console.log('‚è∞ Secret revelation timeout for', hashlock.substring(0, 10) + '...');
    }, 24 * 60 * 60 * 1000);
  }

  /**
   * Monitorer la r√©v√©lation du secret (TRON ‚Üí ETH)
   */
  private monitorEthSecretRevelation(hashlock: string, tronSwapId: string): void {
    console.log('üëÅÔ∏è Monitoring ETH secret revelation for', hashlock.substring(0, 10) + '...');

    const checkInterval = setInterval(async () => {
      if (!this.isRunning) {
        clearInterval(checkInterval);
        return;
      }

      try {
        // V√©rifier si le secret a √©t√© r√©v√©l√© sur ETH en regardant les √©v√©nements
        const secret = await this.extractSecretFromEthEvents(hashlock);
        
        if (secret) {
          console.log('üîì Secret revealed on ETH, completing TRON side...');
          clearInterval(checkInterval);
          
          // Compl√©ter le c√¥t√© TRON
          await this.tronClient.completeSwap(tronSwapId, secret);
        }
      } catch (error) {
        console.error('Error checking ETH secret revelation:', error);
      }
    }, 10000);

    setTimeout(() => {
      clearInterval(checkInterval);
      console.log('‚è∞ ETH secret revelation timeout for', hashlock.substring(0, 10) + '...');
    }, 24 * 60 * 60 * 1000);
  }

  /**
   * Extraire le secret depuis les √©v√©nements TRON
   */
  private async extractSecretFromTronEvents(tronSwapId: string): Promise<string | null> {
    try {
      // Dans un vrai sc√©nario, il faudrait parser les √©v√©nements SwapCompleted du contrat TRON
      // Pour l'instant, on simule l'extraction du secret
      console.log('üîç Extracting secret from TRON events for swap:', tronSwapId);
      
      // TODO: Impl√©menter la logique r√©elle d'extraction du secret depuis les √©v√©nements TRON
      // Cela n√©cessiterait de parser les logs de transaction qui ont r√©v√©l√© le secret
      
      return null; // Placeholder - √† impl√©menter avec la vraie logique
    } catch (error) {
      console.error('Failed to extract secret from TRON events:', error);
      return null;
    }
  }

  /**
   * Extraire le secret depuis les √©v√©nements ETH
   */
  private async extractSecretFromEthEvents(hashlock: string): Promise<string | null> {
    try {
      console.log('üîç Extracting secret from ETH events for hashlock:', hashlock.substring(0, 10) + '...');
      
      const bridgeContract = new ethers.Contract(
        this.ETH_BRIDGE_CONTRACT,
        [
          'event SwapCompleted(bytes32 indexed swapId, bytes32 secret)',
          'function getSwap(bytes32 swapId) external view returns (address user, uint256 amount, bytes32 hashlock, string memory targetAccount, bool completed, bool refunded, uint256 timelock)'
        ],
        this.resolverSigner
      );

      // Chercher les √©v√©nements SwapCompleted r√©cents
      const filter = bridgeContract.filters.SwapCompleted();
      const events = await bridgeContract.queryFilter(filter, -1000); // Last 1000 blocks

      // Trouver l'√©v√©nement correspondant au hashlock
      for (const event of events) {
        if (event.args) {
          const swapId = event.args.swapId;
          const secret = event.args.secret;
          
          // V√©rifier si ce secret correspond au hashlock
          const computedHashlock = ethers.keccak256(secret);
          if (computedHashlock === hashlock) {
            console.log('‚úÖ Secret found in ETH events!');
            return secret;
          }
        }
      }

      return null;
    } catch (error) {
      console.error('Failed to extract secret from ETH events:', error);
      return null;
    }
  }

  /**
   * Compl√©ter le swap ETH
   */
  private async completeEthSwap(ethSwapId: string, secret: string): Promise<void> {
    try {
      console.log('‚öôÔ∏è Completing ETH swap with secret...');
      
      const bridgeContract = new ethers.Contract(
        this.ETH_BRIDGE_CONTRACT,
        [
          'function completeSwap(bytes32 swapId, bytes32 secret) external'
        ],
        this.resolverSigner
      );

      const tx = await bridgeContract.completeSwap(ethSwapId, secret, {
        gasLimit: 200000
      });

      await tx.wait();
      console.log('‚úÖ ETH swap completed:', tx.hash);
    } catch (error) {
      console.error('‚ùå Failed to complete ETH swap:', error);
    }
  }

  /**
   * Obtenir le statut du resolver
   */
  getStatus(): { running: boolean; ethAddress: string; tronContract: string } {
    return {
      running: this.isRunning,
      ethAddress: this.resolverSigner.address,
      tronContract: this.TRON_BRIDGE_CONTRACT
    };
  }
}