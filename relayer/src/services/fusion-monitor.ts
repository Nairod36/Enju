import { ethers } from 'ethers';
import { config } from '../config';
import { NearExecutor } from './near-executor';
import { createLogger } from '../utils/logger';

const logger = createLogger('fusion-monitor');

interface FusionOrderEvent {
  orderId: string;
  secretHash: string;
  nearRecipient: string;
  timelock: number;
  amount: string;
  fromToken: string;
  toToken: string;
  txHash?: string;
}

/**
 * Surveille sp√©cifiquement les ordres Fusion+ avec extension NEAR
 */
export class FusionMonitor {
  private provider: ethers.JsonRpcProvider;
  private nearExecutor: NearExecutor;
  private lastProcessedBlock: number = 0;
  private processingOrders = new Set<string>();

  constructor() {
    this.provider = new ethers.JsonRpcProvider(config.ethereum.rpcUrl);
    this.nearExecutor = new NearExecutor();
  }

  /**
   * D√©marre la surveillance des √©v√©nements Fusion+
   */
  async start(): Promise<void> {
    logger.info('üîç D√©marrage du monitoring Fusion+ ‚Üí NEAR...');
    
    // R√©cup√©rer le dernier bloc trait√©
    this.lastProcessedBlock = await this.provider.getBlockNumber() - 5;
    
    // D√©marrer la surveillance en temps r√©el
    this.startRealTimeMonitoring();
    
    // Polling des blocs pour backup
    this.startBlockPolling();
    
    logger.info('‚úÖ Fusion Monitor d√©marr√©');
  }

  /**
   * Surveillance en temps r√©el des √©v√©nements Fusion+
   */
  private startRealTimeMonitoring(): void {
    // Interface pour les √©v√©nements Fusion+ que nous surveillons
    const fusionInterface = new ethers.Interface([
      // √âv√©nement principal quand un ordre est cr√©√©
      "event OrderCreated(bytes32 indexed orderId, address indexed maker, bytes32 secretHash, uint256 amount)",
      
      // √âv√©nement sp√©cifique pour les ordres cross-chain
      "event CrossChainOrder(bytes32 indexed orderId, uint256 srcChainId, uint256 dstChainId, bytes32 secretHash)",
      
      // √âv√©nement quand l'ordre est lock√©e sur Ethereum
      "event OrderLocked(bytes32 indexed orderId, address token, uint256 amount, bytes32 secretHash)"
    ]);

    // Adresses des contrats Fusion+ (mainnet)
    const fusionContracts = [
      '0x1111111254eeb25477b68fb85ed929f73a960582', // 1inch v5 Router
      '0x111111125421ca6dc452d289314280a0f8842a65', // 1inch v4 Router
      // Ajouter d'autres contrats Fusion+ si n√©cessaire
    ];

    // √âcouter les √©v√©nements en temps r√©el
    fusionContracts.forEach(contractAddress => {
      const filter = {
        address: contractAddress,
        topics: [
          ethers.id("OrderCreated(bytes32,address,bytes32,uint256)"),
          null, // orderId (index√©)
          null, // maker (index√©) 
          null  // secretHash (non-index√©, sera dans data)
        ]
      };

      this.provider.on(filter, async (log) => {
        try {
          await this.processFusionEvent(log);
        } catch (error) {
          logger.error('Erreur lors du traitement de l\'√©v√©nement Fusion+:', error);
        }
      });
    });

    logger.info('üì° Surveillance en temps r√©el des √©v√©nements Fusion+ activ√©e');
  }

  /**
   * Polling des blocs pour s'assurer qu'aucun √©v√©nement n'est manqu√©
   */
  private startBlockPolling(): void {
    setInterval(async () => {
      try {
        await this.checkMissedEvents();
      } catch (error) {
        logger.error('Erreur lors du polling des blocs:', error);
      }
    }, config.monitoring.pollInterval);
  }

  /**
   * Traite un √©v√©nement Fusion+ d√©tect√©
   */
  private async processFusionEvent(log: ethers.Log): Promise<void> {
    try {
      const fusionInterface = new ethers.Interface([
        "event OrderCreated(bytes32 indexed orderId, address indexed maker, bytes32 secretHash, uint256 amount)"
      ]);

      const parsed = fusionInterface.parseLog(log);
      if (!parsed) return;

      const orderId = parsed.args.orderId;
      
      // √âviter le double traitement
      if (this.processingOrders.has(orderId)) {
        return;
      }
      this.processingOrders.add(orderId);

      logger.info(`üéØ Ordre Fusion+ d√©tect√©: ${orderId}`);

      // Analyser si c'est un ordre cross-chain vers NEAR
      const orderDetails = await this.analyzeOrder(log, parsed);
      
      if (orderDetails && this.isNearOrder(orderDetails)) {
        logger.info(`üåø Ordre NEAR confirm√©: ${orderId}`);
        await this.createNearHTLC(orderDetails);
      } else {
        logger.debug(`‚è≠Ô∏è Ordre non-NEAR ignor√©: ${orderId}`);
      }

    } catch (error) {
      logger.error('Erreur lors du traitement de l\'√©v√©nement:', error);
    }
  }

  /**
   * Analyse les d√©tails d'un ordre Fusion+
   */
  private async analyzeOrder(log: ethers.Log, parsed: any): Promise<FusionOrderEvent | null> {
    try {
      // R√©cup√©rer la transaction compl√®te pour plus de d√©tails
      const tx = await this.provider.getTransaction(log.transactionHash);
      if (!tx) return null;

      // Analyser les donn√©es de transaction pour d√©tecter l'extension NEAR
      const nearExtension = this.extractNearExtension(tx.data);
      
      if (!nearExtension) {
        return null; // Pas un ordre NEAR
      }

      return {
        orderId: parsed.args.orderId,
        secretHash: parsed.args.secretHash,
        nearRecipient: nearExtension.recipient,
        timelock: nearExtension.timelock,
        amount: parsed.args.amount.toString(),
        fromToken: nearExtension.fromToken || 'ETH',
        toToken: nearExtension.toToken || 'NEAR',
        txHash: log.transactionHash
      };

    } catch (error) {
      logger.error('Erreur lors de l\'analyse de l\'ordre:', error);
      return null;
    }
  }

  /**
   * Extrait les donn√©es d'extension NEAR depuis les donn√©es de transaction
   */
  private extractNearExtension(txData: string): { recipient: string; timelock: number; fromToken?: string; toToken?: string } | null {
    try {
      // Dans une vraie impl√©mentation, vous devriez :
      // 1. D√©coder les param√®tres customParams de Fusion+
      // 2. Chercher les marqueurs sp√©cifiques √† NEAR
      // 3. Extraire les donn√©es n√©cessaires
      
      // Pour la d√©mo, on simule avec une logique simple
      if (txData.includes('6e656172')) { // "near" en hex
        return {
          recipient: 'alice.near', // √Ä extraire vraiment des donn√©es
          timelock: Math.floor(Date.now() / 1000) + 3600, // 1 heure
          fromToken: 'ETH',
          toToken: 'NEAR'
        };
      }
      
      return null;
    } catch (error) {
      logger.debug('Extension NEAR non trouv√©e:', error);
      return null;
    }
  }

  /**
   * V√©rifie si un ordre est destin√© √† NEAR
   */
  private isNearOrder(orderDetails: FusionOrderEvent): boolean {
    return orderDetails.nearRecipient.includes('.near') || 
           orderDetails.toToken === 'NEAR' ||
           orderDetails.nearRecipient.length === 64; // Adresse NEAR implicite
  }

  /**
   * Cr√©e automatiquement le HTLC correspondant sur NEAR
   */
  private async createNearHTLC(orderDetails: FusionOrderEvent): Promise<void> {
    try {
      logger.info(`üîÑ Cr√©ation du HTLC sur NEAR pour l'ordre ${orderDetails.orderId}`);

      // Cr√©er le swap event pour l'ex√©cuteur NEAR
      const swapEvent = {
        id: orderDetails.orderId,
        fromChain: 'ethereum' as const,
        toChain: 'near' as const,
        fromToken: orderDetails.fromToken,
        toToken: orderDetails.toToken,
        amount: orderDetails.amount,
        userAddress: orderDetails.nearRecipient,
        secretHash: orderDetails.secretHash,
        timelock: orderDetails.timelock,
        status: 'locked' as const,
        txHash: orderDetails.txHash,
        timestamp: Date.now()
      };

      // Ex√©cuter la cr√©ation sur NEAR
      await this.nearExecutor.executeSwapAction(swapEvent);
      
      logger.info(`‚úÖ HTLC cr√©√© sur NEAR pour l'ordre ${orderDetails.orderId}`);
      
      // Marquer comme trait√©
      this.processingOrders.delete(orderDetails.orderId);

    } catch (error) {
      logger.error(`‚ùå Erreur lors de la cr√©ation HTLC NEAR:`, error);
      // Ne pas supprimer de processingOrders pour permettre un retry
    }
  }

  /**
   * V√©rifie les √©v√©nements manqu√©s
   */
  private async checkMissedEvents(): Promise<void> {
    const currentBlock = await this.provider.getBlockNumber();
    
    if (currentBlock <= this.lastProcessedBlock) {
      return;
    }

    // Traitement en batch pour √©viter la surcharge
    const batchSize = 10;
    for (let block = this.lastProcessedBlock + 1; block <= currentBlock; block += batchSize) {
      const endBlock = Math.min(block + batchSize - 1, currentBlock);
      
      // Rechercher les √©v√©nements Fusion+ dans cette plage
      const events = await this.provider.getLogs({
        fromBlock: block,
        toBlock: endBlock,
        topics: [ethers.id("OrderCreated(bytes32,address,bytes32,uint256)")]
      });

      for (const event of events) {
        await this.processFusionEvent(event);
      }
    }

    this.lastProcessedBlock = currentBlock;
  }

  /**
   * Webhook endpoint pour recevoir les notifications directes de l'UI
   */
  async handleWebhook(orderData: any): Promise<void> {
    try {
      logger.info('üì® Webhook re√ßu pour ordre:', orderData.orderId);

      const orderDetails: FusionOrderEvent = {
        orderId: orderData.orderId,
        secretHash: orderData.secretHash,
        nearRecipient: orderData.nearRecipient,
        timelock: orderData.timelock,
        amount: orderData.amount,
        fromToken: orderData.fromToken,
        toToken: orderData.toToken
      };

      // Cr√©er imm√©diatement le HTLC sur NEAR
      await this.createNearHTLC(orderDetails);

    } catch (error) {
      logger.error('Erreur lors du traitement du webhook:', error);
      throw error;
    }
  }

  async stop(): Promise<void> {
    logger.info('üõë Arr√™t du Fusion Monitor...');
    this.provider.removeAllListeners();
  }
}