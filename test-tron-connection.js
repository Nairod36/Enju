const TronWeb = require('tronweb');

// Test de connexion avec votre API Key
const tronWeb = new TronWeb({
  fullHost: 'https://api.shasta.trongrid.io',
  headers: { 
    "TRON-PRO-API-KEY": "5e8b38e2-9828-4737-af16-11b935808aca"
  }
});

async function testTronConnection() {
  try {
    console.log('üîç Test de connexion Tron avec votre API Key...');
    
    // Test 1: R√©cup√©rer les infos du r√©seau
    const nodeInfo = await tronWeb.trx.getNodeInfo();
    console.log('‚úÖ Connexion r√©ussie au r√©seau Tron Shasta');
    console.log(`   Version: ${nodeInfo.configNodeInfo.codeVersion}`);
    
    // Test 2: V√©rifier les limites de l'API
    const currentBlock = await tronWeb.trx.getCurrentBlock();
    console.log(`‚úÖ Block actuel: ${currentBlock.block_header.raw_data.number}`);
    
    // Test 3: Tester plusieurs appels (v√©rifier rate limiting)
    console.log('üöÄ Test de 10 appels rapides...');
    const promises = [];
    for (let i = 0; i < 10; i++) {
      promises.push(tronWeb.trx.getCurrentBlock());
    }
    
    await Promise.all(promises);
    console.log('‚úÖ 10 appels simultan√©s r√©ussis - Pas de rate limiting!');
    
    console.log('üéâ Votre API Key TronGrid fonctionne parfaitement!');
    console.log('üìã Pr√™t pour le d√©ploiement du contrat bridge');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message);
    
    if (error.message.includes('429')) {
      console.log('‚ö†Ô∏è  Rate limit d√©pass√© - API Key peut-√™tre invalide');
    } else if (error.message.includes('401')) {
      console.log('‚ö†Ô∏è  API Key invalide ou expir√©e');
    } else {
      console.log('‚ö†Ô∏è  Probl√®me de connexion r√©seau');
    }
  }
}

// Lancer le test
testTronConnection();